%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!29 &1
OcclusionCullingSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_OcclusionBakeSettings:
    smallestOccluder: 5
    smallestHole: 0.25
    backfaceThreshold: 100
  m_SceneGUID: 00000000000000000000000000000000
  m_OcclusionCullingData: {fileID: 0}
--- !u!104 &2
RenderSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 9
  m_Fog: 0
  m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}
  m_FogMode: 3
  m_FogDensity: 0.01
  m_LinearFogStart: 0
  m_LinearFogEnd: 300
  m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}
  m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}
  m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}
  m_AmbientIntensity: 1
  m_AmbientMode: 3
  m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}
  m_SkyboxMaterial: {fileID: 0}
  m_HaloStrength: 0.5
  m_FlareStrength: 1
  m_FlareFadeSpeed: 3
  m_HaloTexture: {fileID: 0}
  m_SpotCookie: {fileID: 10001, guid: 0000000000000000e000000000000000, type: 0}
  m_DefaultReflectionMode: 0
  m_DefaultReflectionResolution: 128
  m_ReflectionBounces: 1
  m_ReflectionIntensity: 1
  m_CustomReflection: {fileID: 0}
  m_Sun: {fileID: 0}
  m_IndirectSpecularColor: {r: 0, g: 0, b: 0, a: 1}
  m_UseRadianceAmbientProbe: 0
--- !u!157 &3
LightmapSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 12
  m_GIWorkflowMode: 1
  m_GISettings:
    serializedVersion: 2
    m_BounceScale: 1
    m_IndirectOutputScale: 1
    m_AlbedoBoost: 1
    m_EnvironmentLightingMode: 0
    m_EnableBakedLightmaps: 0
    m_EnableRealtimeLightmaps: 0
  m_LightmapEditorSettings:
    serializedVersion: 12
    m_Resolution: 2
    m_BakeResolution: 40
    m_AtlasSize: 1024
    m_AO: 0
    m_AOMaxDistance: 1
    m_CompAOExponent: 1
    m_CompAOExponentDirect: 0
    m_ExtractAmbientOcclusion: 0
    m_Padding: 2
    m_LightmapParameters: {fileID: 0}
    m_LightmapsBakeMode: 1
    m_TextureCompression: 1
    m_FinalGather: 0
    m_FinalGatherFiltering: 1
    m_FinalGatherRayCount: 256
    m_ReflectionCompression: 2
    m_MixedBakeMode: 2
    m_BakeBackend: 1
    m_PVRSampling: 1
    m_PVRDirectSampleCount: 32
    m_PVRSampleCount: 512
    m_PVRBounces: 2
    m_PVREnvironmentSampleCount: 256
    m_PVREnvironmentReferencePointCount: 2048
    m_PVRFilteringMode: 1
    m_PVRDenoiserTypeDirect: 1
    m_PVRDenoiserTypeIndirect: 1
    m_PVRDenoiserTypeAO: 1
    m_PVRFilterTypeDirect: 0
    m_PVRFilterTypeIndirect: 0
    m_PVRFilterTypeAO: 0
    m_PVREnvironmentMIS: 1
    m_PVRCulling: 1
    m_PVRFilteringGaussRadiusDirect: 1
    m_PVRFilteringGaussRadiusIndirect: 5
    m_PVRFilteringGaussRadiusAO: 2
    m_PVRFilteringAtrousPositionSigmaDirect: 0.5
    m_PVRFilteringAtrousPositionSigmaIndirect: 2
    m_PVRFilteringAtrousPositionSigmaAO: 1
    m_ExportTrainingData: 0
    m_TrainingDataDestination: TrainingData
    m_LightProbeSampleCountMultiplier: 4
  m_LightingDataAsset: {fileID: 0}
  m_LightingSettings: {fileID: 0}
--- !u!196 &4
NavMeshSettings:
  serializedVersion: 2
  m_ObjectHideFlags: 0
  m_BuildSettings:
    serializedVersion: 2
    agentTypeID: 0
    agentRadius: 0.5
    agentHeight: 2
    agentSlope: 45
    agentClimb: 0.4
    ledgeDropHeight: 0
    maxJumpAcrossDistance: 0
    minRegionArea: 2
    manualCellSize: 0
    cellSize: 0.16666667
    manualTileSize: 0
    tileSize: 256
    accuratePlacement: 0
    maxJobWorkers: 0
    preserveTilesOutsideBounds: 0
    debug:
      m_Flags: 0
  m_NavMeshData: {fileID: 0}
--- !u!1 &825925900
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 825925903}
  - component: {fileID: 825925902}
  - component: {fileID: 825925901}
  m_Layer: 0
  m_Name: Shiba
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!114 &825925901
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 825925900}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: d1277a37da09f4baaa2f8bcb854189d4, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  ContractJson: {fileID: 4900000, guid: 40f60b500f84a4c01b0b4b2e6dc0799b, type: 3}
  privateKey: {fileID: 1688496629}
  onStart: 0
  onUpdate: 0
  onClick: 1
  onCollision: 0
  onStartFunction: 
  onUpdateFunction: uri
  onClickFunction: name
  onCollisionFunction: 
  onClickParameters: "\xA7"
  abi: '[{"inputs":[{"internalType":"address","name":"_VRFCoordinator","type":"address"},{"internalType":"address","name":"_LinkToken","type":"address"},{"internalType":"bytes32","name":"_keyhash","type":"bytes32"},{"internalType":"uint16","name":"_fees","type":"uint16"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"GOLD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LinkToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SILVER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SWORD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VRFCoordinator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"randomResult","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"redeemResources","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]'
  contract:
    storageLayout: 
    userdoc: 
    devdoc: 
    deployedBytecode: 0x608060405234801561001057600080fd5b506004361061010a5760003560e01c806342619f66116100a257806394985ddd1161007157806394985ddd146105b9578063a22cb465146105dc578063e3e55f081461060a578063e985e9c514610612578063f242432a146106405761010a565b806342619f66146104195780634e1273f4146104215780634f8e2fdf1461059457806394753a101461059c5761010a565b806313dc989f116100de57806313dc989f146102225780632eb2c2d61461022a57806333b60863146103ed5780633e4bee38146104115761010a565b8062fdd58e1461010f57806301ffc9a71461014d57806306fdde03146101885780630e89341c14610205575b600080fd5b61013b6004803603604081101561012557600080fd5b506001600160a01b038135169060200135610709565b60408051918252519081900360200190f35b6101746004803603602081101561016357600080fd5b50356001600160e01b031916610778565b604080519115158252519081900360200190f35b610190610797565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ca5781810151838201526020016101b2565b50505050905090810190601f1680156101f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101906004803603602081101561021b57600080fd5b5035610825565b61013b6108bd565b6103eb600480360360a081101561024057600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561027357600080fd5b82018360208201111561028557600080fd5b803590602001918460208302840111600160201b831117156102a657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102f557600080fd5b82018360208201111561030757600080fd5b803590602001918460208302840111600160201b8311171561032857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561037757600080fd5b82018360208201111561038957600080fd5b803590602001918460018302840111600160201b831117156103aa57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506108c2945050505050565b005b6103f5610bc0565b604080516001600160a01b039092168252519081900360200190f35b61013b610bcf565b61013b610bd4565b6105446004803603604081101561043757600080fd5b810190602081018135600160201b81111561045157600080fd5b82018360208201111561046357600080fd5b803590602001918460208302840111600160201b8311171561048457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156104d357600080fd5b8201836020820111156104e557600080fd5b803590602001918460208302840111600160201b8311171561050657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610bda945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610580578181015183820152602001610568565b505050509050019250505060405180910390f35b6103f5610cc6565b61013b600480360360208110156105b257600080fd5b5035610cd5565b6103eb600480360360408110156105cf57600080fd5b5080359060200135610df3565b6103eb600480360360408110156105f257600080fd5b506001600160a01b0381351690602001351515610e7e565b61013b610f6d565b6101746004803603604081101561062857600080fd5b506001600160a01b0381358116916020013516610f72565b6103eb600480360360a081101561065657600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561069557600080fd5b8201836020820111156106a757600080fd5b803590602001918460018302840111600160201b831117156106c857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610fa0945050505050565b60006001600160a01b0383166107505760405162461bcd60e51b815260040180806020018281038252602b815260200180611b3f602b913960400191505060405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b6001600160e01b03191660009081526020819052604090205460ff1690565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b505050505081565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b50505050509050919050565b600281565b81518351146109025760405162461bcd60e51b8152600401808060200182810382526028815260200180611c916028913960400191505060405180910390fd5b6001600160a01b0384166109475760405162461bcd60e51b8152600401808060200182810382526025815260200180611bbe6025913960400191505060405180910390fd5b61094f6111d2565b6001600160a01b0316856001600160a01b0316148061097a575061097a856109756111d2565b610f72565b6109b55760405162461bcd60e51b8152600401808060200182810382526032815260200180611be36032913960400191505060405180910390fd5b60006109bf6111d2565b90506109cf818787878787610bb8565b60005b8451811015610ad05760008582815181106109e957fe5b602002602001015190506000858381518110610a0157fe5b60200260200101519050610a6e816040518060600160405280602a8152602001611c15602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546111d79092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610aa5908261116b565b60009283526001602081815260408086206001600160a01b038d1687529091529093205550016109d2565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610b56578181015183820152602001610b3e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610b95578181015183820152602001610b7d565b5050505090500194505050505060405180910390a4610bb881878787878761126e565b505050505050565b6009546001600160a01b031681565b600081565b60085481565b60608151835114610c1c5760405162461bcd60e51b8152600401808060200182810382526029815260200180611c686029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015610c3657600080fd5b50604051908082528060200260200182016040528015610c60578160200160208202803683370190505b50905060005b8451811015610cbe57610c9f858281518110610c7e57fe5b6020026020010151858381518110610c9257fe5b6020026020010151610709565b828281518110610cab57fe5b6020908102919091010152600101610c66565b509392505050565b600a546001600160a01b031681565b60006007547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d6020811015610d7157600080fd5b50511015610db05760405162461bcd60e51b815260040180806020018281038252602b815260200180611b93602b913960400191505060405180910390fd5b6000610dc06006546007546114ed565b6000818152600b60209081526040808320879055600c909152902080546001600160a01b03191633179055915050919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e70576040805162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b610e7a82826116a0565b5050565b816001600160a01b0316610e906111d2565b6001600160a01b03161415610ed65760405162461bcd60e51b8152600401808060200182810382526029815260200180611c3f6029913960400191505060405180910390fd5b8060026000610ee36111d2565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610f276111d2565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b600181565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416610fe55760405162461bcd60e51b8152600401808060200182810382526025815260200180611bbe6025913960400191505060405180910390fd5b610fed6111d2565b6001600160a01b0316856001600160a01b031614806110135750611013856109756111d2565b61104e5760405162461bcd60e51b8152600401808060200182810382526029815260200180611b6a6029913960400191505060405180910390fd5b60006110586111d2565b905061107881878761106988611707565b61107288611707565b87610bb8565b6110bf836040518060600160405280602a8152602001611c15602a913960008781526001602090815260408083206001600160a01b038d16845290915290205491906111d7565b60008581526001602090815260408083206001600160a01b038b811685529252808320939093558716815220546110f6908461116b565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4610bb881878787878761174b565b6000828201838110156111c5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3b151590565b335b90565b600081848411156112665760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122b578181015183820152602001611213565b50505050905090810190601f1680156112585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b611280846001600160a01b03166111cc565b15610bb857836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561130e5781810151838201526020016112f6565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561134d578181015183820152602001611335565b50505050905001848103825285818151815260200191508051906020019080838360005b83811015611389578181015183820152602001611371565b50505050905090810190601f1680156113b65780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156113db57600080fd5b505af192505050801561140057506040513d60208110156113fb57600080fd5b505160015b6114955761140c611a3d565b80611417575061145e565b60405162461bcd60e51b815260206004820181815283516024840152835184939192839260440191908501908083836000831561122b578181015183820152602001611213565b60405162461bcd60e51b8152600401808060200182810382526034815260200180611ae36034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146114e45760405162461bcd60e51b8152600401808060200182810382526028815260200180611b176028913960400191505060405180910390fd5b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115ca5781810151838201526020016115b2565b50505050905090810190601f1680156115f75780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b505050506040513d602081101561164257600080fd5b5050600083815260046020526040812054611662908590839030906118bc565b60008581526004602052604090205490915061167f90600161116b565b6000858152600460205260409020556116988482611903565b949350505050565b6064810660088190556000906014106116ba5760006116bd565b600a5b6000848152600c6020908152604080832054600b835281842054825193840190925292825260ff939093169350611702926001600160a01b039092169190849061192f565b505050565b60408051600180825281830190925260609182919060208083019080368337019050509050828160008151811061173a57fe5b602090810291909101015292915050565b61175d846001600160a01b03166111cc565b15610bb857836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117ec5781810151838201526020016117d4565b50505050905090810190601f1680156118195780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561183c57600080fd5b505af192505050801561186157506040513d602081101561185c57600080fd5b505160015b61186d5761140c611a3d565b6001600160e01b0319811663f23a6e6160e01b146114e45760405162461bcd60e51b8152600401808060200182810382526028815260200180611b176028913960400191505060405180910390fd5b60408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6001600160a01b0384166119745760405162461bcd60e51b8152600401808060200182810382526021815260200180611cb96021913960400191505060405180910390fd5b600061197e6111d2565b90506119908160008761106988611707565b60008481526001602090815260408083206001600160a01b03891684529091529020546119bd908461116b565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4611a308160008787878761174b565b5050505050565b60e01c90565b600060443d1015611a4d576111d4565b600481823e6308c379a0611a618251611a37565b14611a6b576111d4565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715611a9b57505050506111d4565b82840192508251915080821115611ab557505050506111d4565b503d83016020828401011115611acd575050506111d4565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e7472616374207769746820666175636574455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a2646970667358221220b87efd8cc7b8a09f9a25fb8552d7e771fca8b465614a0cc999fb27153624d7f764736f6c634300060c0033
    bytecode: 0x610100604052600460c0819052634e4f4d4560e01b60e0908152620000289160059190620006cf565b503480156200003657600080fd5b50604051620025e1380380620025e1833981810160405260808110156200005c57600080fd5b5080516020808301516040808501516060909501518151808301909252601f82527f687474703a2f2f7777772e676f6f676c652e636f6d2f7b69647d2e6a736f6e00938201939093529293909290919084908490620000c26301ffc9a760e01b620001e8565b620000cd816200026d565b620000df636cdb3d1360e11b620001e8565b620000f16303a24d0760e21b620001e8565b506001600160601b0319606092831b811660a052911b16608052604080516020810190915260008082526200012b91309190819062000286565b620001503060016000604051806020016040528060008152506200028660201b60201c565b620001753060026000604051806020016040528060008152506200028660201b60201c565b600980546001600160a01b038087166001600160a01b031992831617909255600a80549286169290911691909117905560068290557d90e40fbeea1d3a4abc8955e946fe31cdcf66f634e100000000000000000061ffff8216046001600160f01b03166007819055505050505062000821565b6001600160e01b0319808216141562000248576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b805162000282906003906020840190620006cf565b5050565b6001600160a01b038416620002cd5760405162461bcd60e51b8152600401808060200182810382526021815260200180620025c06021913960400191505060405180910390fd5b6000620002d9620003b5565b90506200030081600087620002ee88620003ba565b620002f988620003ba565b87620003ff565b60008481526001602090815260408083206001600160a01b0389168452825290912054620003399185906200116b62000407821b17901c565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4620003ae8160008787878762000469565b5050505050565b335b90565b604080516001808252818301909252606091829190602080830190803683370190505090508281600081518110620003ee57fe5b602090810291909101015292915050565b505050505050565b60008282018381101562000462576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b62000488846001600160a01b0316620006c960201b620011cc1760201c565b15620003ff57836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200051a57818101518382015260200162000500565b50505050905090810190601f168015620005485780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156200056c57600080fd5b505af19250505080156200059357506040513d60208110156200058e57600080fd5b505160015b6200066f57620005a262000771565b80620005af575062000637565b8060405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005fb578181015183820152602001620005e1565b50505050905090810190601f168015620006295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405162461bcd60e51b8152600401808060200182810382526034815260200180620025646034913960400191505060405180910390fd5b6001600160e01b0319811663f23a6e6160e01b14620006c05760405162461bcd60e51b8152600401808060200182810382526028815260200180620025986028913960400191505060405180910390fd5b50505050505050565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200071257805160ff191683800117855562000742565b8280016001018555821562000742579182015b828111156200074257825182559160200191906001019062000725565b506200075092915062000754565b5090565b5b8082111562000750576000815560010162000755565b60e01c90565b600060443d10156200078357620003b7565b600481823e6308c379a06200079982516200076b565b14620007a557620003b7565b6040513d600319016004823e80513d6001600160401b038083116024840183101715620007d65750505050620003b7565b82840192508251915080821115620007f25750505050620003b7565b503d830160208284010111156200080c57505050620003b7565b601f01601f1916810160200160405291505090565b60805160601c60a05160601c611d0f6200085560003980610dfe5280611520525080610cdc52806114f15250611d0f6000f3fe608060405234801561001057600080fd5b506004361061010a5760003560e01c806342619f66116100a257806394985ddd1161007157806394985ddd146105b9578063a22cb465146105dc578063e3e55f081461060a578063e985e9c514610612578063f242432a146106405761010a565b806342619f66146104195780634e1273f4146104215780634f8e2fdf1461059457806394753a101461059c5761010a565b806313dc989f116100de57806313dc989f146102225780632eb2c2d61461022a57806333b60863146103ed5780633e4bee38146104115761010a565b8062fdd58e1461010f57806301ffc9a71461014d57806306fdde03146101885780630e89341c14610205575b600080fd5b61013b6004803603604081101561012557600080fd5b506001600160a01b038135169060200135610709565b60408051918252519081900360200190f35b6101746004803603602081101561016357600080fd5b50356001600160e01b031916610778565b604080519115158252519081900360200190f35b610190610797565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ca5781810151838201526020016101b2565b50505050905090810190601f1680156101f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101906004803603602081101561021b57600080fd5b5035610825565b61013b6108bd565b6103eb600480360360a081101561024057600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561027357600080fd5b82018360208201111561028557600080fd5b803590602001918460208302840111600160201b831117156102a657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102f557600080fd5b82018360208201111561030757600080fd5b803590602001918460208302840111600160201b8311171561032857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561037757600080fd5b82018360208201111561038957600080fd5b803590602001918460018302840111600160201b831117156103aa57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506108c2945050505050565b005b6103f5610bc0565b604080516001600160a01b039092168252519081900360200190f35b61013b610bcf565b61013b610bd4565b6105446004803603604081101561043757600080fd5b810190602081018135600160201b81111561045157600080fd5b82018360208201111561046357600080fd5b803590602001918460208302840111600160201b8311171561048457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156104d357600080fd5b8201836020820111156104e557600080fd5b803590602001918460208302840111600160201b8311171561050657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610bda945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610580578181015183820152602001610568565b505050509050019250505060405180910390f35b6103f5610cc6565b61013b600480360360208110156105b257600080fd5b5035610cd5565b6103eb600480360360408110156105cf57600080fd5b5080359060200135610df3565b6103eb600480360360408110156105f257600080fd5b506001600160a01b0381351690602001351515610e7e565b61013b610f6d565b6101746004803603604081101561062857600080fd5b506001600160a01b0381358116916020013516610f72565b6103eb600480360360a081101561065657600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561069557600080fd5b8201836020820111156106a757600080fd5b803590602001918460018302840111600160201b831117156106c857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610fa0945050505050565b60006001600160a01b0383166107505760405162461bcd60e51b815260040180806020018281038252602b815260200180611b3f602b913960400191505060405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b6001600160e01b03191660009081526020819052604090205460ff1690565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b505050505081565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b50505050509050919050565b600281565b81518351146109025760405162461bcd60e51b8152600401808060200182810382526028815260200180611c916028913960400191505060405180910390fd5b6001600160a01b0384166109475760405162461bcd60e51b8152600401808060200182810382526025815260200180611bbe6025913960400191505060405180910390fd5b61094f6111d2565b6001600160a01b0316856001600160a01b0316148061097a575061097a856109756111d2565b610f72565b6109b55760405162461bcd60e51b8152600401808060200182810382526032815260200180611be36032913960400191505060405180910390fd5b60006109bf6111d2565b90506109cf818787878787610bb8565b60005b8451811015610ad05760008582815181106109e957fe5b602002602001015190506000858381518110610a0157fe5b60200260200101519050610a6e816040518060600160405280602a8152602001611c15602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546111d79092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610aa5908261116b565b60009283526001602081815260408086206001600160a01b038d1687529091529093205550016109d2565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610b56578181015183820152602001610b3e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610b95578181015183820152602001610b7d565b5050505090500194505050505060405180910390a4610bb881878787878761126e565b505050505050565b6009546001600160a01b031681565b600081565b60085481565b60608151835114610c1c5760405162461bcd60e51b8152600401808060200182810382526029815260200180611c686029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015610c3657600080fd5b50604051908082528060200260200182016040528015610c60578160200160208202803683370190505b50905060005b8451811015610cbe57610c9f858281518110610c7e57fe5b6020026020010151858381518110610c9257fe5b6020026020010151610709565b828281518110610cab57fe5b6020908102919091010152600101610c66565b509392505050565b600a546001600160a01b031681565b60006007547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d6020811015610d7157600080fd5b50511015610db05760405162461bcd60e51b815260040180806020018281038252602b815260200180611b93602b913960400191505060405180910390fd5b6000610dc06006546007546114ed565b6000818152600b60209081526040808320879055600c909152902080546001600160a01b03191633179055915050919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e70576040805162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b610e7a82826116a0565b5050565b816001600160a01b0316610e906111d2565b6001600160a01b03161415610ed65760405162461bcd60e51b8152600401808060200182810382526029815260200180611c3f6029913960400191505060405180910390fd5b8060026000610ee36111d2565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610f276111d2565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b600181565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416610fe55760405162461bcd60e51b8152600401808060200182810382526025815260200180611bbe6025913960400191505060405180910390fd5b610fed6111d2565b6001600160a01b0316856001600160a01b031614806110135750611013856109756111d2565b61104e5760405162461bcd60e51b8152600401808060200182810382526029815260200180611b6a6029913960400191505060405180910390fd5b60006110586111d2565b905061107881878761106988611707565b61107288611707565b87610bb8565b6110bf836040518060600160405280602a8152602001611c15602a913960008781526001602090815260408083206001600160a01b038d16845290915290205491906111d7565b60008581526001602090815260408083206001600160a01b038b811685529252808320939093558716815220546110f6908461116b565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4610bb881878787878761174b565b6000828201838110156111c5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3b151590565b335b90565b600081848411156112665760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122b578181015183820152602001611213565b50505050905090810190601f1680156112585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b611280846001600160a01b03166111cc565b15610bb857836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561130e5781810151838201526020016112f6565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561134d578181015183820152602001611335565b50505050905001848103825285818151815260200191508051906020019080838360005b83811015611389578181015183820152602001611371565b50505050905090810190601f1680156113b65780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156113db57600080fd5b505af192505050801561140057506040513d60208110156113fb57600080fd5b505160015b6114955761140c611a3d565b80611417575061145e565b60405162461bcd60e51b815260206004820181815283516024840152835184939192839260440191908501908083836000831561122b578181015183820152602001611213565b60405162461bcd60e51b8152600401808060200182810382526034815260200180611ae36034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146114e45760405162461bcd60e51b8152600401808060200182810382526028815260200180611b176028913960400191505060405180910390fd5b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115ca5781810151838201526020016115b2565b50505050905090810190601f1680156115f75780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b505050506040513d602081101561164257600080fd5b5050600083815260046020526040812054611662908590839030906118bc565b60008581526004602052604090205490915061167f90600161116b565b6000858152600460205260409020556116988482611903565b949350505050565b6064810660088190556000906014106116ba5760006116bd565b600a5b6000848152600c6020908152604080832054600b835281842054825193840190925292825260ff939093169350611702926001600160a01b039092169190849061192f565b505050565b60408051600180825281830190925260609182919060208083019080368337019050509050828160008151811061173a57fe5b602090810291909101015292915050565b61175d846001600160a01b03166111cc565b15610bb857836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117ec5781810151838201526020016117d4565b50505050905090810190601f1680156118195780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561183c57600080fd5b505af192505050801561186157506040513d602081101561185c57600080fd5b505160015b61186d5761140c611a3d565b6001600160e01b0319811663f23a6e6160e01b146114e45760405162461bcd60e51b8152600401808060200182810382526028815260200180611b176028913960400191505060405180910390fd5b60408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6001600160a01b0384166119745760405162461bcd60e51b8152600401808060200182810382526021815260200180611cb96021913960400191505060405180910390fd5b600061197e6111d2565b90506119908160008761106988611707565b60008481526001602090815260408083206001600160a01b03891684529091529020546119bd908461116b565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4611a308160008787878761174b565b5050505050565b60e01c90565b600060443d1015611a4d576111d4565b600481823e6308c379a0611a618251611a37565b14611a6b576111d4565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715611a9b57505050506111d4565b82840192508251915080821115611ab557505050506111d4565b503d83016020828401011115611acd575050506111d4565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e7472616374207769746820666175636574455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a2646970667358221220b87efd8cc7b8a09f9a25fb8552d7e771fca8b465614a0cc999fb27153624d7f764736f6c634300060c0033455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a206d696e7420746f20746865207a65726f2061646472657373
    solcInputHash: 52aac1defc35892603c439e598629e05
    args: 
    receipt: 
    metadata: '{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_VRFCoordinator","type":"address"},{"internalType":"address","name":"_LinkToken","type":"address"},{"internalType":"bytes32","name":"_keyhash","type":"bytes32"},{"internalType":"uint16","name":"_fees","type":"uint16"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"GOLD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LinkToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SILVER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SWORD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VRFCoordinator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"randomResult","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"redeemResources","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See
      {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See
      {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the
      same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See
      {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See
      {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See
      {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See
      {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use
      less than 30 000 gas."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}.
      This implementation returns the same URI for *all* token types. It relies on
      the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined
      in the EIP]. Clients calling this function must replace the `\\{id\\}` substring
      with the actual token type ID."}},"version":1},"userdoc":{"kind":"user","methods":{},"notice":"Constructor
      inherits VRFConsumerBase Network: Rinkeby Chainlink VRF Coordinator address:
      0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B LINK token address:               
      0x01BE23585060835E02B77ef475b0Cc51aA1e0709 Key Hash: 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311","version":1}},"settings":{"compilationTarget":{"contracts/NFTContract.sol":"NFTContract"},"evmVersion":"istanbul","libraries":{"__CACHE_BREAKER__":"0x00000000d41867734bbee4c6863d9255b2b06ac1"},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol":{"content":"//
      SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./vendor/SafeMathChainlink.sol\";\n\nimport
      \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/**
      ****************************************************************************\n
      * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n
      * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants
      to provide randomness\n * @dev to Vera the verifier in such a way that Vera
      can be sure he''s not\n * @dev making his output up to suit himself. Reggie
      provides Vera a public key\n * @dev to which he knows the secret key. Each
      time Vera provides a seed to\n * @dev Reggie, he gives back a value which is
      computed completely\n * @dev deterministically from the seed and the secret
      key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the
      output was\n * @dev correctly computed once Reggie tells it to her, but without
      that proof,\n * @dev the output is indistinguishable to her from a uniform
      random sample\n * @dev from the output space.\n *\n * @dev The purpose of this
      contract is to make it easy for unrelated contracts\n * @dev to talk to Vera
      the verifier about the work Reggie is doing, to provide\n * @dev simple access
      to a verifiable source of randomness.\n * *****************************************************************************\n
      * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase,
      and can\n * @dev initialize VRFConsumerBase''s attributes in their constructor
      as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other
      arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator,
      _link) public {\n * @dev         <initialization with other arguments goes
      here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given
      you an ID for the VRF keypair they have\n * @dev committed to (let''s call
      it keyHash), and have told you the minimum LINK\n * @dev price for VRF service.
      Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash,
      fee, seed), where seed is the input you\n * @dev want to generate randomness
      from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle''s
      response\n * @dev to your request, it will call your contract''s fulfillRandomness
      method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual
      random value\n * @dev generated from your seed.\n *\n * @dev The requestId
      argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash,
      seed). If your contract could have concurrent\n * @dev requests open, you can
      use the requestId to track which seed is\n * @dev associated with which randomness.
      See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\"
      for principles to keep in mind,\n * @dev if your contract could have multiple
      requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are
      cryptographically impossible as long as seeds\n * @dev differ. (Which is critical
      to making unpredictable randomness! See the\n * @dev next section.)\n *\n *
      *****************************************************************************\n
      * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call
      your fulfillRandomness method directly\n * @dev could spoof a VRF response
      with any random value, so it''s critical that\n * @dev it cannot be directly
      called by anything other than this base contract\n * @dev (specifically, by
      the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users
      to trust that your contract''s random behavior is free\n * @dev from malicious
      interference, it''s best if you can write it so that all\n * @dev behaviors
      implied by a VRF response are executed *during* your\n * @dev fulfillRandomness
      method. If your contract must store the response (or\n * @dev anything derived
      from it) and use it later, you must ensure that any\n * @dev user-significant
      behavior which depends on that stored value cannot be\n * @dev manipulated
      by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF
      oracle itself have some influence\n * @dev over the order in which VRF responses
      appear on the blockchain, so if\n * @dev your contract could have multiple
      VRF requests in flight simultaneously,\n * @dev you must ensure that the order
      in which the VRF responses arrive cannot\n * @dev be used to manipulate your
      contract''s user-significant behavior.\n *\n * @dev Since the ultimate input
      to the VRF is mixed with the block hash of the\n * @dev block in which the
      request is made, user-provided seeds have no impact\n * @dev on its economic
      security properties. They are only included for API\n * @dev compatability
      with previous versions of this contract.\n *\n * @dev Since the block hash
      of the block which contains the requestRandomness\n * @dev call is mixed into
      the input to the VRF *last*, a sufficiently powerful\n * @dev miner could,
      in principle, fork the blockchain to evict the block\n * @dev containing the
      request, forcing the request to be included in a\n * @dev different block with
      a different hash, and therefore a different input\n * @dev to the VRF. However,
      such an attack would incur a substantial economic\n * @dev cost. This cost
      scales with the number of blocks the VRF oracle waits\n * @dev until it calls
      responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase
      {\n\n  using SafeMathChainlink for uint256;\n\n  /**\n   * @notice fulfillRandomness
      handles the VRF response. Your contract must\n   * @notice implement it. See
      \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to
      keep in mind when implementing your fulfillRandomness\n   * @notice method.\n  
      *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with
      this\n   * @dev signature, and will call it once it has verified the proof\n  
      * @dev associated with the randomness. (It is triggered via a call to\n   *
      @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially
      returned by requestRandomness\n   * @param randomness the VRF output\n   */\n 
      function fulfillRandomness(bytes32 requestId, uint256 randomness)\n    internal
      virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have
      kept the user\n   * seed field around. We remove the use of it because given
      that the blockhash\n   * enters later, it overrides whatever randomness the
      used seed provides.\n   * Given that it adds no security, and can easily lead
      to misunderstandings,\n   * we have removed it from usage and can now provide
      a simpler API.\n   */\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\n\n 
      /**\n   * @notice requestRandomness initiates a request for VRF output given
      _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once
      it''s provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n  
      *\n   * @dev The _keyHash must already be registered with the VRFCoordinator,
      and\n   * @dev the _fee must exceed the fee specified during registration of
      the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial,
      and is kept only for API\n   * @dev compatibility with older versions. It can''t
      *hurt* to mix in some of\n   * @dev your own randomness, here, but it''s not
      necessary because the VRF\n   * @dev oracle will mix the hash of the block
      containing your request into the\n   * @dev VRF seed it ultimately uses.\n  
      *\n   * @param _keyHash ID of public key against which randomness is generated\n  
      * @param _fee The amount of LINK to send with the request\n   *\n   * @return
      requestId unique ID for this request\n   *\n   * @dev The returned requestId
      can be used to distinguish responses to\n   * @dev concurrent requests. It
      is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n 
      function requestRandomness(bytes32 _keyHash, uint256 _fee)\n    internal returns
      (bytes32 requestId)\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash,
      USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator.
      The oracle will mix this with\n    // the hash of the block containing this
      request to obtain the seed/input\n    // which is finally passed to the VRF
      cryptographic machinery.\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash,
      USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash]
      must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which
      was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n   
      // This provides protection against the user repeating their input seed,\n   
      // which would result in a predictable/duplicate output, if multiple such\n   
      // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash].add(1);\n   
      return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface immutable
      internal LINK;\n  address immutable private vrfCoordinator;\n\n  // Nonces
      for each VRF key from which randomness has been requested.\n  //\n  // Must
      stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash
      */ => uint256 /* nonce */) private nonces;\n\n  /**\n   * @param _vrfCoordinator
      address of VRFCoordinator contract\n   * @param _link address of LINK token
      contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n  
      */\n  constructor(address _vrfCoordinator, address _link) public {\n    vrfCoordinator
      = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness
      is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness
      then calls fulfillRandomness, after validating\n  // the origin of the call\n 
      function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external
      {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n   
      fulfillRandomness(requestId, randomness);\n  }\n}\n","keccak256":"0x0631170c6f92cfe43a3305379788214a60175d2aa9b4c6716f0c66515e878129","license":"MIT"},"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol":{"content":"//
      SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ncontract VRFRequestIDBase
      {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF
      coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition
      of the\n   * @dev user-supplied seed, that seed is combined in a hash with
      the\n   * @dev user-specific nonce, and the address of the consuming contract.
      The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash
      in\n   * @dev the final seed, but the nonce does protect against repetition
      in\n   * @dev requests which are included in a single block.\n   *\n   * @param
      _userSeed VRF seed input provided by user\n   * @param _requester Address of
      the requesting contract\n   * @param _nonce User-specific nonce at the time
      of the request\n   */\n  function makeVRFInputSeed(bytes32 _keyHash, uint256
      _userSeed,\n    address _requester, uint256 _nonce)\n    internal pure returns
      (uint256)\n  {\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed,
      _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this
      request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n  
      * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return
      The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the
      seed passed by the consuming\n   * @dev contract, but the one generated by
      makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash, uint256
      _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash,
      _vRFInputSeed));\n  }\n}\n","keccak256":"0x0c3bd40c63dac8398a979b1228c8ecb1c269c157dd16f2dce2086d2270b65b22","license":"MIT"},"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol":{"content":"//
      SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface LinkTokenInterface
      {\n  function allowance(address owner, address spender) external view returns
      (uint256 remaining);\n  function approve(address spender, uint256 value) external
      returns (bool success);\n  function balanceOf(address owner) external view
      returns (uint256 balance);\n  function decimals() external view returns (uint8
      decimalPlaces);\n  function decreaseApproval(address spender, uint256 addedValue)
      external returns (bool success);\n  function increaseApproval(address spender,
      uint256 subtractedValue) external;\n  function name() external view returns
      (string memory tokenName);\n  function symbol() external view returns (string
      memory tokenSymbol);\n  function totalSupply() external view returns (uint256
      totalTokensIssued);\n  function transfer(address to, uint256 value) external
      returns (bool success);\n  function transferAndCall(address to, uint256 value,
      bytes calldata data) external returns (bool success);\n  function transferFrom(address
      from, address to, uint256 value) external returns (bool success);\n}\n","keccak256":"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68","license":"MIT"},"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol":{"content":"//
      SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers
      over Solidity''s arithmetic operations with added overflow\n * checks.\n *\n
      * Arithmetic operations in Solidity wrap on overflow. This can easily result\n
      * in bugs, because programmers usually assume that an overflow raises an\n
      * error, which is the standard behavior in high level programming languages.\n
      * `SafeMath` restores this intuition by reverting the transaction when an\n
      * operation overflows.\n *\n * Using this library instead of the unchecked
      operations eliminates an entire\n * class of bugs, so it''s recommended to
      use it always.\n */\nlibrary SafeMathChainlink {\n  /**\n    * @dev Returns
      the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n   
      * Counterpart to Solidity''s `+` operator.\n    *\n    * Requirements:\n   
      * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b)
      internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >=
      a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    *
      @dev Returns the subtraction of two unsigned integers, reverting on\n    *
      overflow (when the result is negative).\n    *\n    * Counterpart to Solidity''s
      `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n   
      */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n   
      require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n   
      return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned
      integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity''s
      `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n   
      */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n   
      // Gas optimization: this is cheaper than requiring ''a'' not being zero, but
      the\n    // benefit is lost if ''b'' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n   
      if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c
      / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n 
      /**\n    * @dev Returns the integer division of two unsigned integers. Reverts
      on\n    * division by zero. The result is rounded towards zero.\n    *\n   
      * Counterpart to Solidity''s `/` operator. Note: this function uses a\n   
      * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   
      * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n   
      * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256
      a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically
      asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n   
      uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case
      in which this doesn''t hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns
      the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   
      * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity''s `%`
      operator. This function uses a `revert`\n    * opcode (which leaves remaining
      gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming
      all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot
      be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns
      (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return
      a % b;\n  }\n}\n","keccak256":"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f","license":"MIT"},"@openzeppelin/contracts/introspection/ERC165.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n
      * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit
      from this and call {_registerInterface} to declare\n * their support of an
      interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256(''supportsInterface(bytes4)''))
      == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 =
      0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or
      not it''s supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n   
      constructor () internal {\n        // Derived contracts need only register
      support for their own interfaces,\n        // we register support for ERC165
      itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n   
      /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity
      O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function
      supportsInterface(bytes4 interfaceId) public view virtual override returns
      (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n    
      * @dev Registers the contract as an implementer of the interface defined by\n    
      * `interfaceId`. Support of the actual ERC165 interface is automatic and\n    
      * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n    
      *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165
      invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4
      interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff,
      \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId]
      = true;\n    }\n}\n","keccak256":"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501","license":"MIT"},"@openzeppelin/contracts/introspection/IERC165.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n *
      @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n
      *\n * Implementers can declare support of contract interfaces, which can then
      be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation,
      see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true
      if this contract implements the interface defined by\n     * `interfaceId`.
      See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP
      section]\n     * to learn more about how these ids are created.\n     *\n    
      * This function call must use less than 30 000 gas.\n     */\n    function
      supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n","keccak256":"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82","license":"MIT"},"@openzeppelin/contracts/math/SafeMath.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n *
      @dev Wrappers over Solidity''s arithmetic operations with added overflow\n
      * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This
      can easily result\n * in bugs, because programmers usually assume that an overflow
      raises an\n * error, which is the standard behavior in high level programming
      languages.\n * `SafeMath` restores this intuition by reverting the transaction
      when an\n * operation overflows.\n *\n * Using this library instead of the
      unchecked operations eliminates an entire\n * class of bugs, so it''s recommended
      to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the
      addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available
      since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure
      returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return
      (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns
      the substraction of two unsigned integers, with an overflow flag.\n     *\n    
      * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256
      b) internal pure returns (bool, uint256) {\n        if (b > a) return (false,
      0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the
      multiplication of two unsigned integers, with an overflow flag.\n     *\n    
      * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256
      b) internal pure returns (bool, uint256) {\n        // Gas optimization: this
      is cheaper than requiring ''a'' not being zero, but the\n        // benefit
      is lost if ''b'' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n       
      if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c /
      a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n    
      * @dev Returns the division of two unsigned integers, with a division by zero
      flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256
      a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0)
      return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     *
      @dev Returns the remainder of dividing two unsigned integers, with a division
      by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function
      tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n       
      if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n   
      /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n    
      * overflow.\n     *\n     * Counterpart to Solidity''s `+` operator.\n    
      *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n   
      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n       
      uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n       
      return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned
      integers, reverting on\n     * overflow (when the result is negative).\n    
      *\n     * Counterpart to Solidity''s `-` operator.\n     *\n     * Requirements:\n    
      *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256
      a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath:
      subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev
      Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n    
      *\n     * Counterpart to Solidity''s `*` operator.\n     *\n     * Requirements:\n    
      *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256
      a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return
      0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication
      overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the
      integer division of two unsigned integers, reverting on\n     * division by
      zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity''s
      `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves
      remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert
      (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n    
      * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256
      b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division
      by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the
      remainder of dividing two unsigned integers. (unsigned integer modulo),\n    
      * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity''s
      `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining
      gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming
      all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor
      cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure
      returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n       
      return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two
      unsigned integers, reverting with custom message on\n     * overflow (when
      the result is negative).\n     *\n     * CAUTION: This function is deprecated
      because it requires allocating memory for the error\n     * message unnecessarily.
      For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity''s
      `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot
      overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage)
      internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n       
      return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of
      two unsigned integers, reverting with custom message on\n     * division by
      zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function
      is deprecated because it requires allocating memory for the error\n     * message
      unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart
      to Solidity''s `/` operator. Note: this function uses a\n     * `revert` opcode
      (which leaves remaining gas untouched) while Solidity\n     * uses an invalid
      opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n    
      *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256
      a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n       
      require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n    
      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer
      modulo),\n     * reverting with custom message when dividing by zero.\n    
      *\n     * CAUTION: This function is deprecated because it requires allocating
      memory for the error\n     * message unnecessarily. For custom revert reasons
      use {tryMod}.\n     *\n     * Counterpart to Solidity''s `%` operator. This
      function uses a `revert`\n     * opcode (which leaves remaining gas untouched)
      while Solidity uses an\n     * invalid opcode to revert (consuming all remaining
      gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be
      zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage)
      internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n       
      return a % b;\n    }\n}\n","keccak256":"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52","license":"MIT"},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC1155.sol\";\nimport
      \"./IERC1155MetadataURI.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport
      \"../../utils/Context.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport
      \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n
      *\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n
      * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n
      * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155,
      IERC1155MetadataURI {\n    using SafeMath for uint256;\n    using Address for
      address;\n\n    // Mapping from token ID to account balances\n    mapping (uint256
      => mapping(address => uint256)) private _balances;\n\n    // Mapping from account
      to operator approvals\n    mapping (address => mapping(address => bool)) private
      _operatorApprovals;\n\n    // Used as the URI for all token types by relying
      on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private
      _uri;\n\n    /*\n     *     bytes4(keccak256(''balanceOf(address,uint256)''))
      == 0x00fdd58e\n     *     bytes4(keccak256(''balanceOfBatch(address[],uint256[])''))
      == 0x4e1273f4\n     *     bytes4(keccak256(''setApprovalForAll(address,bool)''))
      == 0xa22cb465\n     *     bytes4(keccak256(''isApprovedForAll(address,address)''))
      == 0xe985e9c5\n     *     bytes4(keccak256(''safeTransferFrom(address,address,uint256,uint256,bytes)''))
      == 0xf242432a\n     *     bytes4(keccak256(''safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)''))
      == 0x2eb2c2d6\n     *\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\n    
      *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\n     */\n    bytes4
      private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    /*\n     *    
      bytes4(keccak256(''uri(uint256)'')) == 0x0e89341c\n     */\n    bytes4 private
      constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\n\n    /**\n    
      * @dev See {_setURI}.\n     */\n    constructor (string memory uri_) public
      {\n        _setURI(uri_);\n\n        // register the supported interfaces to
      conform to ERC1155 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1155);\n\n       
      // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\n       
      _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\n    }\n\n    /**\n    
      * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns
      the same URI for *all* token types. It relies\n     * on the token type ID
      substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined
      in the EIP].\n     *\n     * Clients calling this function must replace the
      `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function
      uri(uint256) external view virtual override returns (string memory) {\n       
      return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n    
      *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n    
      */\n    function balanceOf(address account, uint256 id) public view virtual
      override returns (uint256) {\n        require(account != address(0), \"ERC1155:
      balance query for the zero address\");\n        return _balances[id][account];\n   
      }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n    
      *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function
      balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory
      ids\n    )\n        public\n        view\n        virtual\n        override\n       
      returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length,
      \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory
      batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i =
      0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i],
      ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n    
      * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address
      operator, bool approved) public virtual override {\n        require(_msgSender()
      != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator]
      = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n   
      }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function
      isApprovedForAll(address account, address operator) public view virtual override
      returns (bool) {\n        return _operatorApprovals[account][operator];\n   
      }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function
      safeTransferFrom(\n        address from,\n        address to,\n        uint256
      id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n       
      virtual\n        override\n    {\n        require(to != address(0), \"ERC1155:
      transfer to the zero address\");\n        require(\n            from == _msgSender()
      || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is
      not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n       
      _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount),
      data);\n\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155:
      insufficient balance for transfer\");\n        _balances[id][to] = _balances[id][to].add(amount);\n\n       
      emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator,
      from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n    
      */\n    function safeBatchTransferFrom(\n        address from,\n        address
      to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n       
      bytes memory data\n    )\n        public\n        virtual\n        override\n   
      {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts
      length mismatch\");\n        require(to != address(0), \"ERC1155: transfer
      to the zero address\");\n        require(\n            from == _msgSender()
      || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller
      is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n       
      _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for
      (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n           
      uint256 amount = amounts[i];\n\n            _balances[id][from] = _balances[id][from].sub(\n               
      amount,\n                \"ERC1155: insufficient balance for transfer\"\n           
      );\n            _balances[id][to] = _balances[id][to].add(amount);\n       
      }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n       
      _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n   
      }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on
      the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined
      in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}`
      substring in either the\n     * URI or any of the amounts in the JSON file
      at said URI will be replaced by\n     * clients with the token type ID.\n    
      *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would
      be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n    
      * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because
      these URIs cannot be meaningfully represented by the {URI} event,\n     * this
      function emits no events.\n     */\n    function _setURI(string memory newuri)
      internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates
      `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n    
      * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n    
      * - `account` cannot be the zero address.\n     * - If `account` refers to
      a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and
      return the\n     * acceptance magic value.\n     */\n    function _mint(address
      account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n       
      require(account != address(0), \"ERC1155: mint to the zero address\");\n\n       
      address operator = _msgSender();\n\n        _beforeTokenTransfer(operator,
      address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n       
      _balances[id][account] = _balances[id][account].add(amount);\n        emit
      TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator,
      address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched]
      version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and
      `amounts` must have the same length.\n     * - If `to` refers to a smart contract,
      it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n    
      * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[]
      memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n       
      require(to != address(0), \"ERC1155: mint to the zero address\");\n       
      require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n       
      address operator = _msgSender();\n\n        _beforeTokenTransfer(operator,
      address(0), to, ids, amounts, data);\n\n        for (uint i = 0; i < ids.length;
      i++) {\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\n       
      }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n       
      _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts,
      data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type
      `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account`
      cannot be the zero address.\n     * - `account` must have at least `amount`
      tokens of token type `id`.\n     */\n    function _burn(address account, uint256
      id, uint256 amount) internal virtual {\n        require(account != address(0),
      \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n       
      _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id),
      _asSingletonArray(amount), \"\");\n\n        _balances[id][account] = _balances[id][account].sub(\n           
      amount,\n            \"ERC1155: burn amount exceeds balance\"\n        );\n\n       
      emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n   
      /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of
      {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts`
      must have the same length.\n     */\n    function _burnBatch(address account,
      uint256[] memory ids, uint256[] memory amounts) internal virtual {\n       
      require(account != address(0), \"ERC1155: burn from the zero address\");\n       
      require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n       
      address operator = _msgSender();\n\n        _beforeTokenTransfer(operator,
      account, address(0), ids, amounts, \"\");\n\n        for (uint i = 0; i < ids.length;
      i++) {\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\n               
      amounts[i],\n                \"ERC1155: burn amount exceeds balance\"\n           
      );\n        }\n\n        emit TransferBatch(operator, account, address(0),
      ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any
      token transfer. This includes minting\n     * and burning, as well as batched
      variants.\n     *\n     * The same hook is called on both single and batched
      variants. For single\n     * transfers, the length of the `id` and `amount`
      arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount`
      pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of
      ``from``''s tokens\n     * of token type `id` will be  transferred to `to`.\n    
      * - When `from` is zero, `amount` tokens of token type `id` will be minted\n    
      * for `to`.\n     * - when `to` is zero, `amount` of ``from``''s tokens of
      token type `id`\n     * will be burned.\n     * - `from` and `to` are never
      both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n    
      *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using
      Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n       
      address from,\n        address to,\n        uint256[] memory ids,\n       
      uint256[] memory amounts,\n        bytes memory data\n    )\n        internal\n       
      virtual\n    { }\n\n    function _doSafeTransferAcceptanceCheck(\n        address
      operator,\n        address from,\n        address to,\n        uint256 id,\n       
      uint256 amount,\n        bytes memory data\n    )\n        private\n    {\n       
      if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator,
      from, id, amount, data) returns (bytes4 response) {\n                if (response
      != IERC1155Receiver(to).onERC1155Received.selector) {\n                   
      revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n           
      } catch Error(string memory reason) {\n                revert(reason);\n           
      } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver
      implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n       
      address operator,\n        address from,\n        address to,\n        uint256[]
      memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n   
      )\n        private\n    {\n        if (to.isContract()) {\n            try
      IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data)
      returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector)
      {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n               
      }\n            } catch Error(string memory reason) {\n                revert(reason);\n           
      } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver
      implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256
      element) private pure returns (uint256[] memory) {\n        uint256[] memory
      array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n   
      }\n}\n","keccak256":"0x3fef0eeb248c7109ce0f9adce59543d8b4141b78382d3ec34db33dabdbbc13f9","license":"MIT"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n
      * @dev Required interface of an ERC1155 compliant contract, as defined in the\n
      * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n
      */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value`
      tokens of token type `id` are transferred from `from` to `to` by `operator`.\n    
      */\n    event TransferSingle(address indexed operator, address indexed from,
      address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent
      to multiple {TransferSingle} events, where `operator`, `from` and `to` are
      the same for all\n     * transfers.\n     */\n    event TransferBatch(address
      indexed operator, address indexed from, address indexed to, uint256[] ids,
      uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or
      revokes permission to `operator` to transfer their tokens, according to\n    
      * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address
      indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the
      URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n    
      *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees]
      that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n    
      */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev
      Returns the amount of tokens of token type `id` owned by `account`.\n     *\n    
      * Requirements:\n     *\n     * - `account` cannot be the zero address.\n    
      */\n    function balanceOf(address account, uint256 id) external view returns
      (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched]
      version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts`
      and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[]
      calldata accounts, uint256[] calldata ids) external view returns (uint256[]
      memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator`
      to transfer the caller''s tokens, according to `approved`,\n     *\n     *
      Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n    
      * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address
      operator, bool approved) external;\n\n    /**\n     * @dev Returns true if
      `operator` is approved to transfer ``account``''s tokens.\n     *\n     * See
      {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account,
      address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers
      `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits
      a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to`
      cannot be the zero address.\n     * - If the caller is not `from`, it must
      be have been approved to spend ``from``''s tokens via {setApprovalForAll}.\n    
      * - `from` must have a balance of tokens of type `id` of at least `amount`.\n    
      * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received}
      and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address
      from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n   
      /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of
      {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n    
      * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n    
      * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived}
      and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address
      from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes
      calldata data) external;\n}\n","keccak256":"0x61321d2c86346045bf394885ee3afeecc65f9daad2694bc19110967588fd7b5d","license":"MIT"},"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC1155.sol\";\n\n/**\n
      * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n
      * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n
      *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155
      {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n    
      * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n    
      * clients with the actual token type ID.\n     */\n    function uri(uint256
      id) external view returns (string memory);\n}\n","keccak256":"0xd918cca1b659f588a6d12d05fd7196179a8b1eac9133d7f77da7ef3133e13256","license":"MIT"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n
      * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n   
      /**\n        @dev Handles the receipt of a single ERC1155 token type. This
      function is\n        called at the end of a `safeTransferFrom` after the balance
      has been updated.\n        To accept the transfer, this must return\n       
      `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n       
      (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The
      address which initiated the transfer (i.e. msg.sender)\n        @param from
      The address which previously owned the token\n        @param id The ID of the
      token being transferred\n        @param value The amount of tokens being transferred\n       
      @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`
      if transfer is allowed\n    */\n    function onERC1155Received(\n        address
      operator,\n        address from,\n        uint256 id,\n        uint256 value,\n       
      bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n   
      /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This
      function\n        is called at the end of a `safeBatchTransferFrom` after the
      balances have\n        been updated. To accept the transfer(s), this must return\n       
      `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n       
      (i.e. 0xbc197c81, or its own function selector).\n        @param operator The
      address which initiated the batch transfer (i.e. msg.sender)\n        @param
      from The address which previously owned the token\n        @param ids An array
      containing ids of each token being transferred (order and length must match
      values array)\n        @param values An array containing amounts of each token
      being transferred (order and length must match ids array)\n        @param data
      Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`
      if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n       
      address operator,\n        address from,\n        uint256[] calldata ids,\n       
      uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n       
      returns(bytes4);\n}\n","keccak256":"0x2690a9b7f4f7489b8d25a4fc6bffc02ec3971fb41ed6c8b59adef2833bdab07c","license":"MIT"},"@openzeppelin/contracts/utils/Address.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n *
      @dev Collection of functions related to the address type\n */\nlibrary Address
      {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n    
      * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for
      which this function returns\n     * false is an externally-owned account (EOA)
      and not a contract.\n     *\n     * Among others, `isContract` will return
      false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned
      account\n     *  - a contract in construction\n     *  - an address where a
      contract will be created\n     *  - an address where a contract lived, but
      was destroyed\n     * ====\n     */\n    function isContract(address account)
      internal view returns (bool) {\n        // This method relies on extcodesize,
      which returns 0 for contracts in\n        // construction, since the code is
      only stored at the end of the\n        // constructor execution.\n\n       
      uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n       
      assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n   
      /**\n     * @dev Replacement for Solidity''s `transfer`: sends `amount` wei
      to\n     * `recipient`, forwarding all available gas and reverting on errors.\n    
      *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas
      cost\n     * of certain opcodes, possibly making contracts go over the 2300
      gas limit\n     * imposed by `transfer`, making them unable to receive funds
      via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n    
      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn
      more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`,
      care must be\n     * taken to not create reentrancy vulnerabilities. Consider
      using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions
      pattern].\n     */\n    function sendValue(address payable recipient, uint256
      amount) internal {\n        require(address(this).balance >= amount, \"Address:
      insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls,
      avoid-call-value\n        (bool success, ) = recipient.call{ value: amount
      }(\"\");\n        require(success, \"Address: unable to send value, recipient
      may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function
      call using a low level `call`. A\n     * plain`call` is an unsafe replacement
      for a function call: use this\n     * function instead.\n     *\n     * If
      `target` reverts with a revert reason, it is bubbled up by this\n     * function
      (like regular Solidity function calls).\n     *\n     * Returns the raw returned
      data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n    
      *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n    
      * - calling `target` with `data` must not revert.\n     *\n     * _Available
      since v3.1._\n     */\n    function functionCall(address target, bytes memory
      data) internal returns (bytes memory) {\n      return functionCall(target,
      data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same
      as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n    
      * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n    
      * _Available since v3.1._\n     */\n    function functionCall(address target,
      bytes memory data, string memory errorMessage) internal returns (bytes memory)
      {\n        return functionCallWithValue(target, data, 0, errorMessage);\n   
      }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    
      * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n    
      *\n     * - the calling contract must have an ETH balance of at least `value`.\n    
      * - the called Solidity function must be `payable`.\n     *\n     * _Available
      since v3.1._\n     */\n    function functionCallWithValue(address target, bytes
      memory data, uint256 value) internal returns (bytes memory) {\n        return
      functionCallWithValue(target, data, value, \"Address: low-level call with value
      failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`],
      but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n    
      *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address
      target, bytes memory data, uint256 value, string memory errorMessage) internal
      returns (bytes memory) {\n        require(address(this).balance >= value, \"Address:
      insufficient balance for call\");\n        require(isContract(target), \"Address:
      call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n       
      (bool success, bytes memory returndata) = target.call{ value: value }(data);\n       
      return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n   
      /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    
      * but performing a static call.\n     *\n     * _Available since v3.3._\n    
      */\n    function functionStaticCall(address target, bytes memory data) internal
      view returns (bytes memory) {\n        return functionStaticCall(target, data,
      \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev
      Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n    
      * but performing a static call.\n     *\n     * _Available since v3.3._\n    
      */\n    function functionStaticCall(address target, bytes memory data, string
      memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target),
      \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line
      avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n       
      return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n   
      /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    
      * but performing a delegate call.\n     *\n     * _Available since v3.4._\n    
      */\n    function functionDelegateCall(address target, bytes memory data) internal
      returns (bytes memory) {\n        return functionDelegateCall(target, data,
      \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev
      Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n    
      * but performing a delegate call.\n     *\n     * _Available since v3.4._\n    
      */\n    function functionDelegateCall(address target, bytes memory data, string
      memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target),
      \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line
      avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n       
      return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n   
      function _verifyCallResult(bool success, bytes memory returndata, string memory
      errorMessage) private pure returns(bytes memory) {\n        if (success) {\n           
      return returndata;\n        } else {\n            // Look for revert reason
      and bubble it up if present\n            if (returndata.length > 0) {\n               
      // The easiest way to bubble the revert reason is using memory via assembly\n\n               
      // solhint-disable-next-line no-inline-assembly\n                assembly {\n                   
      let returndata_size := mload(returndata)\n                    revert(add(32,
      returndata), returndata_size)\n                }\n            } else {\n               
      revert(errorMessage);\n            }\n        }\n    }\n}\n","keccak256":"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"//
      SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev
      Provides information about the current execution context, including the\n *
      sender of the transaction and its data. While these are generally available\n
      * via msg.sender and msg.data, they should not be accessed in such a direct\n
      * manner, since when dealing with GSN meta-transactions the account sending
      and\n * paying for execution may not be the actual sender (as far as an application\n
      * is concerned).\n *\n * This contract is only required for intermediate, library-like
      contracts.\n */\nabstract contract Context {\n    function _msgSender() internal
      view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n   
      function _msgData() internal view virtual returns (bytes memory) {\n       
      this; // silence state mutability warning without generating bytecode - see
      https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n   
      }\n}\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/NFTContract.sol":{"content":"//
      SPDX-License-Identifier: MIT\npragma solidity ^0.6.6;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport
      \"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\";\n\n//import \"@openzeppelin/contracts/access/Ownable.sol\";\n/**\n
      * Constructor inherits VRFConsumerBase\n *\n * Network: Rinkeby\n * Chainlink
      VRF Coordinator address: 0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\n * LINK
      token address:                0x01BE23585060835E02B77ef475b0Cc51aA1e0709\n
      * Key Hash: 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\n
      */\ncontract NFTContract is ERC1155, VRFConsumerBase {\n    string public name
      = \"NOME\";\n    using SafeMath for uint256;\n    bytes32 internal keyHash;\n   
      uint256 internal fee;\n    uint256 public randomResult;\n    address public
      VRFCoordinator;\n    // rinkeby: 0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\n   
      address public LinkToken;\n    // rinkeby: 0x01BE23585060835E02B77ef475b0Cc51aA1e0709a\n\n   
      uint256 public constant GOLD = 0;\n    uint256 public constant SILVER = 1;\n   
      uint256 public constant SWORD = 2;\n\n  /*   uint256 public constant GOLD =
      0;\n    uint256 public constant SILVER = 1;\n    uint256 public constant SWORD
      = 2;\n    uint256 public constant SHIELD = 3; */\n\n    mapping(bytes32 =>
      uint256) requestToItem;\n    mapping(bytes32 => address) requestToSender;\n   
      mapping(bytes32 => uint256) requestToTokenId;\n\n    constructor(\n       
      address _VRFCoordinator,\n        address _LinkToken,\n        bytes32 _keyhash,\n       
      // 1 is the equivalent of 0.1 LINK\n        // 1 should be the equivalent of
      0.0001 LINK\n        uint16 _fees\n    )\n        public\n        VRFConsumerBase(_VRFCoordinator,
      _LinkToken)\n        ERC1155(\n            \"http://www.google.com/{id}.json\"\n       
      )\n    {\n        _mint(address(this), GOLD, 0, \"\");\n        _mint(address(this),
      SILVER, 0, \"\");\n        _mint(address(this), SWORD, 0, \"\");\n\n       
      /* _mint(address(this), GOLD, 0, \"\");\n        _mint(address(this), SILVER,
      0, \"\");\n        _mint(address(this), SWORD, 0, \"\");\n        _mint(address(this),
      SHIELD, 0, \"\"); */\n        VRFCoordinator = _VRFCoordinator;\n        LinkToken
      = _LinkToken;\n        keyHash = _keyhash;\n        fee = _fees/10000 ** 18;\n   
      }\n\n    function redeemResources(uint256 itemId) public returns (bytes32)
      {\n        require(\n            LINK.balanceOf(address(this)) >= fee,\n           
      \"Not enough LINK - fill contract with faucet\"\n        );\n        bytes32
      requestId = requestRandomness(keyHash, fee);\n        requestToItem[requestId]
      = itemId;\n        requestToSender[requestId] = msg.sender;\n        return
      requestId;\n    }\n\n    function fulfillRandomness(bytes32 requestId, uint256
      randomNumber)\n        internal\n        override\n    {\n        //we have
      a 50% chances of receive some resources\n        randomResult = randomNumber
      % 100;\n        //if we mined some resources we receive 5 of them\n       
      uint256 quantity = randomResult > 20 ? 10 : 0;\n\n        _mint(requestToSender[requestId],
      requestToItem[requestId], quantity, \"\");\n    }\n}\n","keccak256":"0xe5c0697aa98e6929d49d04788a4fe9f24ad9d366889753edaf28c6bff1a9dbb1","license":"MIT"}},"version":1}'
    transactionHash: 0xda7512e9419806c2f14066f37da1d0a5d4ac94dd681460a2f48323ac23a1ecbe
    abi: 
    address: 0xA4fC902fF8Fa3165Ed7760B1c98D8EE1Ac9EA178
--- !u!212 &825925902
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 825925900}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 21300000, guid: d21ef1bd20b584962a0eca1864a492a7, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0
--- !u!4 &825925903
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 825925900}
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -0.0015219831, y: -0.000028589735, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 1
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!1 &1411679804
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 1411679807}
  - component: {fileID: 1411679806}
  - component: {fileID: 1411679805}
  m_Layer: 0
  m_Name: EventSystem
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!114 &1411679805
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1411679804}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4f231c4fb786f3946a6b90b886c48677, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_HorizontalAxis: Horizontal
  m_VerticalAxis: Vertical
  m_SubmitButton: Submit
  m_CancelButton: Cancel
  m_InputActionsPerSecond: 10
  m_RepeatDelay: 0.5
  m_ForceModuleActive: 0
--- !u!114 &1411679806
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1411679804}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 76c392e42b5098c458856cdf6ecaaaa1, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_FirstSelected: {fileID: 0}
  m_sendNavigationEvents: 1
  m_DragThreshold: 10
--- !u!4 &1411679807
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1411679804}
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: 0, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 2
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!114 &1688496629 stripped
MonoBehaviour:
  m_CorrespondingSourceObject: {fileID: 6733284129093459380, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
  m_PrefabInstance: {fileID: 6733284129569272897}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: d199490a83bb2b844b9695cbf13b01ef, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
--- !u!1 &1918001474
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 1918001477}
  - component: {fileID: 1918001476}
  - component: {fileID: 1918001475}
  m_Layer: 0
  m_Name: Main Camera
  m_TagString: MainCamera
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!81 &1918001475
AudioListener:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1918001474}
  m_Enabled: 1
--- !u!20 &1918001476
Camera:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1918001474}
  m_Enabled: 1
  serializedVersion: 2
  m_ClearFlags: 1
  m_BackGroundColor: {r: 1, g: 1, b: 1, a: 0}
  m_projectionMatrixMode: 1
  m_GateFitMode: 2
  m_FOVAxisMode: 0
  m_SensorSize: {x: 36, y: 24}
  m_LensShift: {x: 0, y: 0}
  m_FocalLength: 50
  m_NormalizedViewPortRect:
    serializedVersion: 2
    x: 0
    y: 0
    width: 1
    height: 1
  near clip plane: 0.3
  far clip plane: 1000
  field of view: 60
  orthographic: 1
  orthographic size: 5
  m_Depth: -1
  m_CullingMask:
    serializedVersion: 2
    m_Bits: 4294967295
  m_RenderingPath: -1
  m_TargetTexture: {fileID: 0}
  m_TargetDisplay: 0
  m_TargetEye: 3
  m_HDR: 1
  m_AllowMSAA: 1
  m_AllowDynamicResolution: 0
  m_ForceIntoRT: 0
  m_OcclusionCulling: 1
  m_StereoConvergence: 10
  m_StereoSeparation: 0.022
--- !u!4 &1918001477
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1918001474}
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: 0, z: -10}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 0
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!1001 &6733284129569272897
PrefabInstance:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_Modification:
    m_TransformParent: {fileID: 0}
    m_Modifications:
    - target: {fileID: 6733284129117978112, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_Name
      value: Private_Key_Prefab
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_Pivot.x
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_Pivot.y
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_RootOrder
      value: 3
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_AnchorMax.x
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_AnchorMax.y
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_AnchorMin.x
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_AnchorMin.y
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_SizeDelta.x
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_SizeDelta.y
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalPosition.x
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalPosition.y
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalPosition.z
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalRotation.w
      value: 1
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalRotation.x
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalRotation.y
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalRotation.z
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_AnchoredPosition.x
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_AnchoredPosition.y
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalEulerAnglesHint.x
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalEulerAnglesHint.y
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978116, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_LocalEulerAnglesHint.z
      value: 0
      objectReference: {fileID: 0}
    - target: {fileID: 6733284129117978117, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
      propertyPath: m_Camera
      value: 
      objectReference: {fileID: 1918001476}
    m_RemovedComponents: []
  m_SourcePrefab: {fileID: 100100000, guid: 011aeb82ca1a84358871e8736c5a948c, type: 3}
